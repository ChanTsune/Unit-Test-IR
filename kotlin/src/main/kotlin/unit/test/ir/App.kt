/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package unit.test.ir

import com.charleskorn.kaml.PolymorphismStyle
import com.charleskorn.kaml.Yaml
import com.charleskorn.kaml.YamlConfiguration
import kastree.ast.Visitor
import kastree.ast.Writer
import kotlinx.cli.ArgParser
import kotlinx.cli.ArgType
import kotlinx.cli.default
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.StringFormat
import kotlinx.serialization.json.Json
import unit.test.ir.ast.node.Node
import unit.test.ir.converters.IR2KtConverter
import java.io.File

enum class FileFormat {
    JSON,
    YAML,
}
@ExperimentalSerializationApi
fun formatConfig(type:FileFormat): StringFormat {
    return when(type){
        FileFormat.JSON -> Json {
            classDiscriminator = "Node"
            ignoreUnknownKeys = true
        }
        FileFormat.YAML -> Yaml(
                configuration = YamlConfiguration(
                        strictMode = false,
                        polymorphismStyle = PolymorphismStyle.Property,
                        polymorphismPropertyName = "Node"
                )
        )
    }
}

@ExperimentalSerializationApi
fun main(args: Array<String>) {
    val parser = ArgParser("utir-kotlin")
    val input by parser.option(ArgType.String, shortName = "i").default("../sample_data/test_sample.yaml")
    val output by parser.option(ArgType.String, shortName = "o").default("../sample_data/test_sample.kt")
    parser.parse(args)

    val code = """
        package foo
        
        @Serializable
        fun baz(a:String) {
          for(i in listOf(1)) {
            println(i)
          }
        }
//        fun hoge(a:String) = baz(a=a)
//        class A(val a:String){
//            val d:String = ""
//            fun c() = println(a)
//        }
//        fun p() {
//            val b = A("w")
//            var c = b.a
//            c = "pow"[0]
//
//            b.a = "pows"
//        }
    """.trimIndent()
    // Call the parser with the code
    try {
        val file = Parser.parseFile(code)
        Visitor.visit(file) { node, parentNode ->
//            println(node)
        }
//        println(Writer.write(file))
    } catch (e: Parser.ParseError){
        println(e)
    }

    try {
        val fileContent = File(input).readText()

        formatConfig(FileFormat.YAML)
                .apply {
            try {
                decodeFromString(Node.serializer(), fileContent).let {
                    IR2KtConverter().visit(it).let {
                        val ktCode = Writer.write(it)
                        File(output).writeText(ktCode)
                    }
                }
            } catch (e: Throwable) {
                println(e.message)
                e.stackTrace.map { println(it) }
            }
        }
    } catch (e: Throwable) {
        println(e.message)
        e.stackTrace.map { println(it) }
    }
}
