/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package unit.test.ir

import kastree.ast.Node as KNode
import kastree.ast.Writer




fun main(args: Array<String>) {
    val code = """
        package foo
    
//        fun bar() {
//            // Print hello
//            println("Hello, World!")
//        }
//    
        fun baz(a:String) = println("Hello, again!" + a)
        fun hoge(a:String) = baz(a=a)
//        class A(val a:String){
//            val d:String = ""
//            fun c() = println(a)
//        }
//        fun p() {
//            val b = A("w")
//            var c = b.a
//            c = "pow"[0]
//            
//            b.a = "pows"
//        }
    """.trimIndent()
    // Call the parser with the code
    try {
        val file = Parser.parseFile(code)
        println(file)
        val decls = file.decls
        for (decl in decls) {
            when(decl){
                is KNode.Decl.Structured -> {
                    println(decl)
                    println("MEMBERS")
                    for (member in decl.members) {
                        println(member)
                    }
                }
                is KNode.Decl.Func -> {
                    println(decl)
                    val body = decl.body
                    when(body){
                        is KNode.Decl.Func.Body.Block -> {
                            for (stmt in body.block.stmts){
                                when(stmt) {
                                    is KNode.Stmt.Decl -> {}
                                    is KNode.Stmt.Expr -> {}
                                }
                                println(stmt)
                            }
                        }
                        else -> println(decl.body)
                    }
                }
                else -> println(decl)
            }
        }


        println(Writer.write(file))
    } catch (e: Parser.ParseError){
        println(e)
    }
}
