-- ASDL's 4 builtin types are:
-- identifier, int, string, constant

module UTIR
{
    file = File(int version, decl* body)

    block = Block(stmt* body)

    stmt = DeclStmt(decl decl)
          | ExprDecl(expr expr)
          | Return(expr value)
          | For(var value, expr generator, block body)
          | Throw(expr value)
          | Try(block body, catch catch)

    decl = Var(string name, string? type, expr? value)
          | Func(string name, arg* args, block body)
          | Class(string name, string* bases, Func* constructors, decl* fields)
          | Suite(string name, Func setup, Func tiardown, Case* cases)
          | Case(case case)

    case = CaseBlock(string name, block body)

    catch = Catch(string type, block body, catch? catch)

    expr = Name(string name)
         | Constant(string value, constant_kind kind)
         | List(expr* values)
         | Tuple(expr* values)
         | BinOp(expr left, binop_kind kind, expr right)
         | UnaryOp(expr value, unaryop_kind kind)
         | Subscript(expr value, expr index)
         | Call(expr value, arg* args)
         | Assert(assert_kind kind)
    constant_kind = STRING | BYTES | INTEGER | FLOAT | BOOLEAN | NULL
    binop_kind = DOT | ASSIGN | ADD | SUB | MUL | DIV | MOD | LEFT_SHIFT | RIGHT_SHIFT | NOT_EQUAL | IN
    unaryop_kind = PLUS | MINUS
    arg = Arg(string? name, expr value)
    assert_kind = AssertEqual(expr expected, expr actual, string? message)
                | AssertFailure(expr func, expr* args, string? error,string? message)
}
